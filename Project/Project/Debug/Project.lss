
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000005ce  00000642  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000111e  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000949  00000000  00000000  0000182a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ce  00000000  00000000  00002173  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00002944  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000457  00000000  00000000  00002a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000988  00000000  00000000  00002e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000037fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1d d1       	rcall	.+570    	; 0x2ee <main>
  b4:	8a c2       	rjmp	.+1300   	; 0x5ca <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <COMMAND>:
	unsigned char i;
	for(i=0;i<n;i++)
	{
		DATA(font[i]);
	}
}
  b8:	ef e3       	ldi	r30, 0x3F	; 63
  ba:	ff e1       	ldi	r31, 0x1F	; 31
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <COMMAND+0x4>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <COMMAND+0xa>
  c2:	00 00       	nop
  c4:	98 2f       	mov	r25, r24
  c6:	90 7f       	andi	r25, 0xF0	; 240
  c8:	95 bb       	out	0x15, r25	; 21
  ca:	95 b3       	in	r25, 0x15	; 21
  cc:	9e 7f       	andi	r25, 0xFE	; 254
  ce:	95 bb       	out	0x15, r25	; 21
  d0:	95 b3       	in	r25, 0x15	; 21
  d2:	9d 7f       	andi	r25, 0xFD	; 253
  d4:	95 bb       	out	0x15, r25	; 21
  d6:	f5 e0       	ldi	r31, 0x05	; 5
  d8:	fa 95       	dec	r31
  da:	f1 f7       	brne	.-4      	; 0xd8 <COMMAND+0x20>
  dc:	00 00       	nop
  de:	95 b3       	in	r25, 0x15	; 21
  e0:	94 60       	ori	r25, 0x04	; 4
  e2:	95 bb       	out	0x15, r25	; 21
  e4:	25 e0       	ldi	r18, 0x05	; 5
  e6:	2a 95       	dec	r18
  e8:	f1 f7       	brne	.-4      	; 0xe6 <COMMAND+0x2e>
  ea:	00 00       	nop
  ec:	95 b3       	in	r25, 0x15	; 21
  ee:	9b 7f       	andi	r25, 0xFB	; 251
  f0:	95 bb       	out	0x15, r25	; 21
  f2:	e0 e1       	ldi	r30, 0x10	; 16
  f4:	8e 9f       	mul	r24, r30
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	85 bb       	out	0x15, r24	; 21
 102:	85 b3       	in	r24, 0x15	; 21
 104:	8d 7f       	andi	r24, 0xFD	; 253
 106:	85 bb       	out	0x15, r24	; 21
 108:	f5 e0       	ldi	r31, 0x05	; 5
 10a:	fa 95       	dec	r31
 10c:	f1 f7       	brne	.-4      	; 0x10a <COMMAND+0x52>
 10e:	00 00       	nop
 110:	85 b3       	in	r24, 0x15	; 21
 112:	84 60       	ori	r24, 0x04	; 4
 114:	85 bb       	out	0x15, r24	; 21
 116:	25 e0       	ldi	r18, 0x05	; 5
 118:	2a 95       	dec	r18
 11a:	f1 f7       	brne	.-4      	; 0x118 <COMMAND+0x60>
 11c:	00 00       	nop
 11e:	85 b3       	in	r24, 0x15	; 21
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	85 bb       	out	0x15, r24	; 21
 124:	08 95       	ret

00000126 <MOVE>:
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	19 f4       	brne	.+6      	; 0x130 <MOVE+0xa>
 12a:	8f e7       	ldi	r24, 0x7F	; 127
 12c:	86 0f       	add	r24, r22
 12e:	02 c0       	rjmp	.+4      	; 0x134 <MOVE+0xe>
 130:	8f eb       	ldi	r24, 0xBF	; 191
 132:	86 0f       	add	r24, r22
 134:	c1 cf       	rjmp	.-126    	; 0xb8 <COMMAND>
 136:	08 95       	ret

00000138 <LCD_INIT>:
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	86 e7       	ldi	r24, 0x76	; 118
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <LCD_INIT+0x6>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_INIT+0x10>
 148:	00 00       	nop
 14a:	88 e2       	ldi	r24, 0x28	; 40
 14c:	b5 df       	rcall	.-150    	; 0xb8 <COMMAND>
 14e:	8c e0       	ldi	r24, 0x0C	; 12
 150:	b3 df       	rcall	.-154    	; 0xb8 <COMMAND>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	b1 df       	rcall	.-158    	; 0xb8 <COMMAND>
 156:	87 ee       	ldi	r24, 0xE7	; 231
 158:	97 e1       	ldi	r25, 0x17	; 23
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_INIT+0x22>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_INIT+0x28>
 160:	00 00       	nop
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	a9 cf       	rjmp	.-174    	; 0xb8 <COMMAND>
 166:	08 95       	ret

00000168 <DATA>:
 168:	ef e3       	ldi	r30, 0x3F	; 63
 16a:	ff e1       	ldi	r31, 0x1F	; 31
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <DATA+0x4>
 170:	00 c0       	rjmp	.+0      	; 0x172 <DATA+0xa>
 172:	00 00       	nop
 174:	98 2f       	mov	r25, r24
 176:	90 7f       	andi	r25, 0xF0	; 240
 178:	95 bb       	out	0x15, r25	; 21
 17a:	95 b3       	in	r25, 0x15	; 21
 17c:	91 60       	ori	r25, 0x01	; 1
 17e:	95 bb       	out	0x15, r25	; 21
 180:	95 b3       	in	r25, 0x15	; 21
 182:	9d 7f       	andi	r25, 0xFD	; 253
 184:	95 bb       	out	0x15, r25	; 21
 186:	f5 e0       	ldi	r31, 0x05	; 5
 188:	fa 95       	dec	r31
 18a:	f1 f7       	brne	.-4      	; 0x188 <DATA+0x20>
 18c:	00 00       	nop
 18e:	95 b3       	in	r25, 0x15	; 21
 190:	94 60       	ori	r25, 0x04	; 4
 192:	95 bb       	out	0x15, r25	; 21
 194:	25 e0       	ldi	r18, 0x05	; 5
 196:	2a 95       	dec	r18
 198:	f1 f7       	brne	.-4      	; 0x196 <DATA+0x2e>
 19a:	00 00       	nop
 19c:	95 b3       	in	r25, 0x15	; 21
 19e:	9b 7f       	andi	r25, 0xFB	; 251
 1a0:	95 bb       	out	0x15, r25	; 21
 1a2:	e0 e1       	ldi	r30, 0x10	; 16
 1a4:	8e 9f       	mul	r24, r30
 1a6:	c0 01       	movw	r24, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	85 bb       	out	0x15, r24	; 21
 1ac:	85 b3       	in	r24, 0x15	; 21
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	85 bb       	out	0x15, r24	; 21
 1b2:	85 b3       	in	r24, 0x15	; 21
 1b4:	8d 7f       	andi	r24, 0xFD	; 253
 1b6:	85 bb       	out	0x15, r24	; 21
 1b8:	f5 e0       	ldi	r31, 0x05	; 5
 1ba:	fa 95       	dec	r31
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <DATA+0x52>
 1be:	00 00       	nop
 1c0:	85 b3       	in	r24, 0x15	; 21
 1c2:	84 60       	ori	r24, 0x04	; 4
 1c4:	85 bb       	out	0x15, r24	; 21
 1c6:	25 e0       	ldi	r18, 0x05	; 5
 1c8:	2a 95       	dec	r18
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <DATA+0x60>
 1cc:	00 00       	nop
 1ce:	85 b3       	in	r24, 0x15	; 21
 1d0:	8b 7f       	andi	r24, 0xFB	; 251
 1d2:	85 bb       	out	0x15, r24	; 21
 1d4:	08 95       	ret

000001d6 <fnds>:
	_delay_us(1);          		// E pulse width time 230ns 지연
	PORTC &= 0b11111011;		// E = 0
}


int fnds(int count){
 1d6:	cf 92       	push	r12
 1d8:	df 92       	push	r13
 1da:	ef 92       	push	r14
 1dc:	ff 92       	push	r15
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	2a 97       	sbiw	r28, 0x0a	; 10
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	de bf       	out	0x3e, r29	; 62
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	cd bf       	out	0x3d, r28	; 61
 1f6:	6c 01       	movw	r12, r24
	unsigned char fnd[10] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xd8, 0x80, 0x90};
 1f8:	8a e0       	ldi	r24, 0x0A	; 10
 1fa:	e0 e0       	ldi	r30, 0x00	; 0
 1fc:	f1 e0       	ldi	r31, 0x01	; 1
 1fe:	de 01       	movw	r26, r28
 200:	11 96       	adiw	r26, 0x01	; 1
 202:	01 90       	ld	r0, Z+
 204:	0d 92       	st	X+, r0
 206:	8a 95       	dec	r24
 208:	e1 f7       	brne	.-8      	; 0x202 <fnds+0x2c>
	
	int i = count / 1000;
 20a:	c6 01       	movw	r24, r12
 20c:	68 ee       	ldi	r22, 0xE8	; 232
 20e:	73 e0       	ldi	r23, 0x03	; 3
 210:	b5 d1       	rcall	.+874    	; 0x57c <__divmodhi4>
 212:	7b 01       	movw	r14, r22
	int j = count / 100 % 10;
 214:	c6 01       	movw	r24, r12
 216:	64 e6       	ldi	r22, 0x64	; 100
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	b0 d1       	rcall	.+864    	; 0x57c <__divmodhi4>
 21c:	cb 01       	movw	r24, r22
 21e:	2a e0       	ldi	r18, 0x0A	; 10
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	b9 01       	movw	r22, r18
 224:	ab d1       	rcall	.+854    	; 0x57c <__divmodhi4>
 226:	8c 01       	movw	r16, r24
	int k = count / 10 % 10;
 228:	c6 01       	movw	r24, r12
 22a:	b9 01       	movw	r22, r18
 22c:	a7 d1       	rcall	.+846    	; 0x57c <__divmodhi4>
 22e:	f8 2f       	mov	r31, r24
 230:	e9 2f       	mov	r30, r25
 232:	cb 01       	movw	r24, r22
 234:	b9 01       	movw	r22, r18
 236:	a2 d1       	rcall	.+836    	; 0x57c <__divmodhi4>
 238:	bc 01       	movw	r22, r24
 23a:	4f 2f       	mov	r20, r31
	int m = count % 10;
 23c:	5e 2f       	mov	r21, r30
 23e:	20 e0       	ldi	r18, 0x00	; 0

	for(int h = 0; h < 5; h++){
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	42 c0       	rjmp	.+132    	; 0x2c8 <fnds+0xf2>
 244:	e1 e0       	ldi	r30, 0x01	; 1
		PORTB=fnd[i];
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ec 0f       	add	r30, r28
 24a:	fd 1f       	adc	r31, r29
 24c:	ee 0d       	add	r30, r14
 24e:	ff 1d       	adc	r31, r15
 250:	80 81       	ld	r24, Z
 252:	88 bb       	out	0x18, r24	; 24
 254:	88 e0       	ldi	r24, 0x08	; 8
		PORTD=0x08; //왼쪽에서 첫번째 FND 지정
 256:	82 bb       	out	0x12, r24	; 18
 258:	8f e9       	ldi	r24, 0x9F	; 159
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	9f e0       	ldi	r25, 0x0F	; 15
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <fnds+0x86>
 260:	00 c0       	rjmp	.+0      	; 0x262 <fnds+0x8c>
 262:	00 00       	nop
 264:	e1 e0       	ldi	r30, 0x01	; 1
		_delay_ms(1);
		PORTB=fnd[j];
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ec 0f       	add	r30, r28
 26a:	fd 1f       	adc	r31, r29
 26c:	e0 0f       	add	r30, r16
 26e:	f1 1f       	adc	r31, r17
 270:	80 81       	ld	r24, Z
 272:	88 bb       	out	0x18, r24	; 24
 274:	84 e0       	ldi	r24, 0x04	; 4
		PORTD=0x04; //두번째 FND 지정
 276:	82 bb       	out	0x12, r24	; 18
 278:	8f e9       	ldi	r24, 0x9F	; 159
 27a:	9f e0       	ldi	r25, 0x0F	; 15
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <fnds+0xa6>
 280:	00 c0       	rjmp	.+0      	; 0x282 <fnds+0xac>
 282:	00 00       	nop
 284:	e1 e0       	ldi	r30, 0x01	; 1
		_delay_ms(1);
		PORTB=fnd[k];
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	ec 0f       	add	r30, r28
 28a:	fd 1f       	adc	r31, r29
 28c:	e6 0f       	add	r30, r22
 28e:	f7 1f       	adc	r31, r23
 290:	90 81       	ld	r25, Z
 292:	98 bb       	out	0x18, r25	; 24
 294:	92 e0       	ldi	r25, 0x02	; 2
		PORTD=0x02; //세번째 FND 지정
 296:	92 bb       	out	0x12, r25	; 18
 298:	8f e9       	ldi	r24, 0x9F	; 159
 29a:	9f e0       	ldi	r25, 0x0F	; 15
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <fnds+0xc6>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <fnds+0xcc>
 2a2:	00 00       	nop
 2a4:	e1 e0       	ldi	r30, 0x01	; 1
		_delay_ms(1);
		PORTB=fnd[m];
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	ec 0f       	add	r30, r28
 2aa:	fd 1f       	adc	r31, r29
 2ac:	e4 0f       	add	r30, r20
 2ae:	f5 1f       	adc	r31, r21
 2b0:	90 81       	ld	r25, Z
 2b2:	98 bb       	out	0x18, r25	; 24
 2b4:	91 e0       	ldi	r25, 0x01	; 1
		PORTD=0x01; //네번째 FND 지정
 2b6:	92 bb       	out	0x12, r25	; 18
 2b8:	8f e9       	ldi	r24, 0x9F	; 159
 2ba:	9f e0       	ldi	r25, 0x0F	; 15
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <fnds+0xe6>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <fnds+0xec>
 2c2:	00 00       	nop
 2c4:	2f 5f       	subi	r18, 0xFF	; 255
	int i = count / 1000;
	int j = count / 100 % 10;
	int k = count / 10 % 10;
	int m = count % 10;

	for(int h = 0; h < 5; h++){
 2c6:	3f 4f       	sbci	r19, 0xFF	; 255
 2c8:	25 30       	cpi	r18, 0x05	; 5
 2ca:	31 05       	cpc	r19, r1
 2cc:	0c f4       	brge	.+2      	; 0x2d0 <fnds+0xfa>
 2ce:	ba cf       	rjmp	.-140    	; 0x244 <fnds+0x6e>
 2d0:	2a 96       	adiw	r28, 0x0a	; 10
		PORTB=fnd[m];
		PORTD=0x01; //네번째 FND 지정
		_delay_ms(1);
	}
	
}
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
 2e8:	df 90       	pop	r13
 2ea:	cf 90       	pop	r12
 2ec:	08 95       	ret

000002ee <main>:
 2ee:	cf 93       	push	r28

int main(void)
{
 2f0:	df 93       	push	r29
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	2e 97       	sbiw	r28, 0x0e	; 14
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
	unsigned char sw3=0;
	unsigned char sw4=0;
	unsigned char sw5=0;
	unsigned char sw6=0;
	unsigned char sw7=0;
	int leds[7] = {0, 0, 0, 0, 0, 0, 0};
 302:	fe 01       	movw	r30, r28
 304:	31 96       	adiw	r30, 0x01	; 1
 306:	8e e0       	ldi	r24, 0x0E	; 14
 308:	df 01       	movw	r26, r30
 30a:	1d 92       	st	X+, r1
 30c:	8a 95       	dec	r24
 30e:	e9 f7       	brne	.-6      	; 0x30a <main+0x1c>
	unsigned int t = 1;
	unsigned int count = 0;
	unsigned int countL = 0;
	DDRC = 0xff; //lcd
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	84 bb       	out	0x14, r24	; 20
	DDRE = 0xFF; //led
 314:	82 b9       	out	0x02, r24	; 2
	DDRA = 0xFF;
 316:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
 318:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00; //lcd
 31a:	15 ba       	out	0x15, r1	; 21
	DDRE = 0x00; //스위치
 31c:	12 b8       	out	0x02, r1	; 2
	
	
	DDRB=0xFF;
 31e:	87 bb       	out	0x17, r24	; 23
	DDRD=0x0F;
 320:	9f e0       	ldi	r25, 0x0F	; 15
 322:	91 bb       	out	0x11, r25	; 17
	PORTB=0xFF;
 324:	88 bb       	out	0x18, r24	; 24
	PORTD=0x0F;
 326:	92 bb       	out	0x12, r25	; 18
	
	LCD_INIT(); //lcd초기
 328:	07 df       	rcall	.-498    	; 0x138 <LCD_INIT>
	unsigned char sw5=0;
	unsigned char sw6=0;
	unsigned char sw7=0;
	int leds[7] = {0, 0, 0, 0, 0, 0, 0};
	unsigned int t = 1;
	unsigned int count = 0;
 32a:	e1 2c       	mov	r14, r1
 32c:	f1 2c       	mov	r15, r1
	unsigned char sw1=0;
	unsigned char sw2=0;
	unsigned char sw3=0;
	unsigned char sw4=0;
	unsigned char sw5=0;
	unsigned char sw6=0;
 32e:	61 2c       	mov	r6, r1
{
	unsigned char sw1=0;
	unsigned char sw2=0;
	unsigned char sw3=0;
	unsigned char sw4=0;
	unsigned char sw5=0;
 330:	71 2c       	mov	r7, r1
int main(void)
{
	unsigned char sw1=0;
	unsigned char sw2=0;
	unsigned char sw3=0;
	unsigned char sw4=0;
 332:	81 2c       	mov	r8, r1

int main(void)
{
	unsigned char sw1=0;
	unsigned char sw2=0;
	unsigned char sw3=0;
 334:	91 2c       	mov	r9, r1
}

int main(void)
{
	unsigned char sw1=0;
	unsigned char sw2=0;
 336:	a1 2c       	mov	r10, r1
	
}

int main(void)
{
	unsigned char sw1=0;
 338:	b1 2c       	mov	r11, r1
		
		
		sw7=0;
		countL = 0;
		//스위치
		if((PINE&0x01) == 0x00) {
 33a:	08 99       	sbic	0x01, 0	; 1
 33c:	06 c0       	rjmp	.+12     	; 0x34a <main+0x5c>
			sw1 = 1 - sw1;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	8b 19       	sub	r24, r11
 342:	b8 2e       	mov	r11, r24
			count++;
 344:	bf ef       	ldi	r27, 0xFF	; 255
 346:	eb 1a       	sub	r14, r27
 348:	fb 0a       	sbc	r15, r27
		}
		if((PINE&0x02) == 0x00) {
 34a:	09 99       	sbic	0x01, 1	; 1
 34c:	06 c0       	rjmp	.+12     	; 0x35a <main+0x6c>
			sw2 = 1 - sw2;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	8a 19       	sub	r24, r10
 352:	a8 2e       	mov	r10, r24
			count++;
 354:	2f ef       	ldi	r18, 0xFF	; 255
 356:	e2 1a       	sub	r14, r18
 358:	f2 0a       	sbc	r15, r18
		}
		if((PINE&0x04) == 0x00) {
 35a:	0a 99       	sbic	0x01, 2	; 1
 35c:	06 c0       	rjmp	.+12     	; 0x36a <main+0x7c>
			sw3 = 1 - sw3;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	89 19       	sub	r24, r9
 362:	98 2e       	mov	r9, r24
			count++;
 364:	3f ef       	ldi	r19, 0xFF	; 255
 366:	e3 1a       	sub	r14, r19
 368:	f3 0a       	sbc	r15, r19
		}
		if((PINE&0x08) == 0x00) {
 36a:	0b 99       	sbic	0x01, 3	; 1
 36c:	06 c0       	rjmp	.+12     	; 0x37a <main+0x8c>
			sw4 = 1 - sw4;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	88 19       	sub	r24, r8
 372:	88 2e       	mov	r8, r24
			count++;
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	e8 1a       	sub	r14, r24
 378:	f8 0a       	sbc	r15, r24
		}
		if((PINE&0x10) == 0x00) {
 37a:	0c 99       	sbic	0x01, 4	; 1
 37c:	06 c0       	rjmp	.+12     	; 0x38a <main+0x9c>
			sw5 = 1 - sw5;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	87 19       	sub	r24, r7
 382:	78 2e       	mov	r7, r24
			count++;
 384:	9f ef       	ldi	r25, 0xFF	; 255
 386:	e9 1a       	sub	r14, r25
 388:	f9 0a       	sbc	r15, r25
		}
		if((PINE&0x20) == 0x00) {
 38a:	0d 99       	sbic	0x01, 5	; 1
 38c:	06 c0       	rjmp	.+12     	; 0x39a <main+0xac>
			sw6 = 1 - sw6;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	86 19       	sub	r24, r6
 392:	68 2e       	mov	r6, r24
			count++;
 394:	af ef       	ldi	r26, 0xFF	; 255
 396:	ea 1a       	sub	r14, r26
 398:	fa 0a       	sbc	r15, r26
		}
		if((PINE&0x40) == 0x00) {
 39a:	0e 99       	sbic	0x01, 6	; 1
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <main+0xba>
			sw7 = 1;
			count++;
 39e:	bf ef       	ldi	r27, 0xFF	; 255
 3a0:	eb 1a       	sub	r14, r27
 3a2:	fb 0a       	sbc	r15, r27
		if((PINE&0x20) == 0x00) {
			sw6 = 1 - sw6;
			count++;
		}
		if((PINE&0x40) == 0x00) {
			sw7 = 1;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	01 c0       	rjmp	.+2      	; 0x3aa <main+0xbc>
			PORTB=fnd[digit];
			_delay_ms(1000);
		}*/
		
		
		sw7=0;
 3a8:	80 e0       	ldi	r24, 0x00	; 0
			sw7 = 1;
			count++;
		}
		
		
		if(sw1 == 1){
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	b2 12       	cpse	r11, r18
 3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <main+0xd2>
			leds[0] = 1;
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	3a 83       	std	Y+2, r19	; 0x02
 3b6:	29 83       	std	Y+1, r18	; 0x01
			PORTA|=0x01;
 3b8:	9b b3       	in	r25, 0x1b	; 27
 3ba:	91 60       	ori	r25, 0x01	; 1
 3bc:	9b bb       	out	0x1b, r25	; 27
 3be:	07 c0       	rjmp	.+14     	; 0x3ce <main+0xe0>
			//_delay_ms(t);
		}
		
		else if(sw1 == 0) {
 3c0:	b1 10       	cpse	r11, r1
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <main+0xe0>
			leds[0] = 0;
 3c4:	1a 82       	std	Y+2, r1	; 0x02
 3c6:	19 82       	std	Y+1, r1	; 0x01
			PORTA &= 0xFE;
 3c8:	9b b3       	in	r25, 0x1b	; 27
 3ca:	9e 7f       	andi	r25, 0xFE	; 254
 3cc:	9b bb       	out	0x1b, r25	; 27
			//_delay_ms(t);
		}
		
		if(sw2 == 1){
 3ce:	31 e0       	ldi	r19, 0x01	; 1
 3d0:	a3 12       	cpse	r10, r19
 3d2:	08 c0       	rjmp	.+16     	; 0x3e4 <main+0xf6>
			leds[1] = 1;
 3d4:	21 e0       	ldi	r18, 0x01	; 1
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	3c 83       	std	Y+4, r19	; 0x04
 3da:	2b 83       	std	Y+3, r18	; 0x03
			PORTA|=0x02;
 3dc:	9b b3       	in	r25, 0x1b	; 27
 3de:	92 60       	ori	r25, 0x02	; 2
 3e0:	9b bb       	out	0x1b, r25	; 27
 3e2:	07 c0       	rjmp	.+14     	; 0x3f2 <main+0x104>
			//_delay_ms(t);
		}
		else if(sw2 == 0) {
 3e4:	a1 10       	cpse	r10, r1
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <main+0x104>
			leds[1] = 0;
 3e8:	1c 82       	std	Y+4, r1	; 0x04
 3ea:	1b 82       	std	Y+3, r1	; 0x03
			PORTA &= 0xfd;
 3ec:	9b b3       	in	r25, 0x1b	; 27
 3ee:	9d 7f       	andi	r25, 0xFD	; 253
 3f0:	9b bb       	out	0x1b, r25	; 27
			//_delay_ms(t);
		}
		
		
		if(sw3 == 1){
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	99 12       	cpse	r9, r25
 3f6:	08 c0       	rjmp	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			leds[2] = 1;
 3f8:	21 e0       	ldi	r18, 0x01	; 1
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	3e 83       	std	Y+6, r19	; 0x06
 3fe:	2d 83       	std	Y+5, r18	; 0x05
			PORTA |= 0x04;
 400:	9b b3       	in	r25, 0x1b	; 27
 402:	94 60       	ori	r25, 0x04	; 4
 404:	9b bb       	out	0x1b, r25	; 27
 406:	07 c0       	rjmp	.+14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			//_delay_ms(t);
		}
		else if(sw3 == 0) {
 408:	91 10       	cpse	r9, r1
 40a:	05 c0       	rjmp	.+10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			leds[2] = 0;
 40c:	1e 82       	std	Y+6, r1	; 0x06
 40e:	1d 82       	std	Y+5, r1	; 0x05
			PORTA &= 0xFB;
 410:	9b b3       	in	r25, 0x1b	; 27
 412:	9b 7f       	andi	r25, 0xFB	; 251
 414:	9b bb       	out	0x1b, r25	; 27
			//_delay_ms(t);
		}
		if(sw4 == 1){
 416:	a1 e0       	ldi	r26, 0x01	; 1
 418:	8a 12       	cpse	r8, r26
 41a:	08 c0       	rjmp	.+16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			leds[3] = 1;
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	38 87       	std	Y+8, r19	; 0x08
 422:	2f 83       	std	Y+7, r18	; 0x07
			PORTA |= 0x08;
 424:	9b b3       	in	r25, 0x1b	; 27
 426:	98 60       	ori	r25, 0x08	; 8
 428:	9b bb       	out	0x1b, r25	; 27
 42a:	07 c0       	rjmp	.+14     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			//_delay_ms(t);
		}
		else if(sw4 == 0) {
 42c:	81 10       	cpse	r8, r1
 42e:	05 c0       	rjmp	.+10     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			leds[3] = 0;
 430:	18 86       	std	Y+8, r1	; 0x08
 432:	1f 82       	std	Y+7, r1	; 0x07
			PORTA &= 0xF7;
 434:	9b b3       	in	r25, 0x1b	; 27
 436:	97 7f       	andi	r25, 0xF7	; 247
 438:	9b bb       	out	0x1b, r25	; 27
			//_delay_ms(t);
		}
		if(sw5 == 1){
 43a:	b1 e0       	ldi	r27, 0x01	; 1
 43c:	7b 12       	cpse	r7, r27
 43e:	08 c0       	rjmp	.+16     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			leds[4] = 1;
 440:	21 e0       	ldi	r18, 0x01	; 1
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	3a 87       	std	Y+10, r19	; 0x0a
 446:	29 87       	std	Y+9, r18	; 0x09
			PORTA |= 0x10;
 448:	9b b3       	in	r25, 0x1b	; 27
 44a:	90 61       	ori	r25, 0x10	; 16
 44c:	9b bb       	out	0x1b, r25	; 27
 44e:	07 c0       	rjmp	.+14     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			//_delay_ms(t);
		}
		else if(sw5 == 0) {
 450:	71 10       	cpse	r7, r1
 452:	05 c0       	rjmp	.+10     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			leds[4] = 0;
 454:	1a 86       	std	Y+10, r1	; 0x0a
 456:	19 86       	std	Y+9, r1	; 0x09
			PORTA &= 0xEF;
 458:	9b b3       	in	r25, 0x1b	; 27
 45a:	9f 7e       	andi	r25, 0xEF	; 239
 45c:	9b bb       	out	0x1b, r25	; 27
			//_delay_ms(t);
		}
		if(sw6 == 1){
 45e:	21 e0       	ldi	r18, 0x01	; 1
 460:	62 12       	cpse	r6, r18
 462:	08 c0       	rjmp	.+16     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
			leds[5] = 1;
 464:	21 e0       	ldi	r18, 0x01	; 1
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	3c 87       	std	Y+12, r19	; 0x0c
 46a:	2b 87       	std	Y+11, r18	; 0x0b
			PORTA |= 0x20;
 46c:	9b b3       	in	r25, 0x1b	; 27
 46e:	90 62       	ori	r25, 0x20	; 32
 470:	9b bb       	out	0x1b, r25	; 27
 472:	07 c0       	rjmp	.+14     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			//_delay_ms(t);
		}
		else if(sw6 == 0) {
 474:	61 10       	cpse	r6, r1
 476:	05 c0       	rjmp	.+10     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			leds[5] = 0;
 478:	1c 86       	std	Y+12, r1	; 0x0c
 47a:	1b 86       	std	Y+11, r1	; 0x0b
			PORTA &= 0xDF;
 47c:	9b b3       	in	r25, 0x1b	; 27
 47e:	9f 7d       	andi	r25, 0xDF	; 223
 480:	9b bb       	out	0x1b, r25	; 27
			//_delay_ms(t);
		}
		//led off switch
		if(sw7 == 1){
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	31 f4       	brne	.+12     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			sw1 = 0;
			sw2 = 0;
			sw3 = 0;
			sw4 = 0;
			sw5 = 0;
			sw6 = 0;
 486:	61 2c       	mov	r6, r1
		if(sw7 == 1){
			sw1 = 0;
			sw2 = 0;
			sw3 = 0;
			sw4 = 0;
			sw5 = 0;
 488:	71 2c       	mov	r7, r1
		//led off switch
		if(sw7 == 1){
			sw1 = 0;
			sw2 = 0;
			sw3 = 0;
			sw4 = 0;
 48a:	81 2c       	mov	r8, r1
		}
		//led off switch
		if(sw7 == 1){
			sw1 = 0;
			sw2 = 0;
			sw3 = 0;
 48c:	91 2c       	mov	r9, r1
			//_delay_ms(t);
		}
		//led off switch
		if(sw7 == 1){
			sw1 = 0;
			sw2 = 0;
 48e:	a1 2c       	mov	r10, r1
			PORTA &= 0xDF;
			//_delay_ms(t);
		}
		//led off switch
		if(sw7 == 1){
			sw1 = 0;
 490:	b1 2c       	mov	r11, r1
			sw4 = 0;
			sw5 = 0;
			sw6 = 0;
		}
		
		fnds(count);
 492:	c7 01       	movw	r24, r14
 494:	a0 de       	rcall	.-704    	; 0x1d6 <fnds>
			PORTA = 0xFF; //A8
		} else{ //상태 led 끄기
			PORTA = 0xFF;
		}*/
		
		for(int i = 0; i < 8; i++){
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	17 c0       	rjmp	.+46     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
			if(leds[i] == 1) {
 49c:	fc 01       	movw	r30, r24
 49e:	ee 0f       	add	r30, r30
 4a0:	ff 1f       	adc	r31, r31
 4a2:	a1 e0       	ldi	r26, 0x01	; 1
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	ac 0f       	add	r26, r28
 4a8:	bd 1f       	adc	r27, r29
 4aa:	ea 0f       	add	r30, r26
 4ac:	fb 1f       	adc	r31, r27
 4ae:	20 81       	ld	r18, Z
 4b0:	31 81       	ldd	r19, Z+1	; 0x01
 4b2:	21 30       	cpi	r18, 0x01	; 1
 4b4:	31 05       	cpc	r19, r1
 4b6:	39 f4       	brne	.+14     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
				PORTA = 0x40;
 4b8:	80 e4       	ldi	r24, 0x40	; 64
 4ba:	8b bb       	out	0x1b, r24	; 27
			PORTA = 0xFF; //A8
		} else{ //상태 led 끄기
			PORTA = 0xFF;
		}*/
		
		for(int i = 0; i < 8; i++){
 4bc:	05 e0       	ldi	r16, 0x05	; 5
 4be:	10 e0       	ldi	r17, 0x00	; 0
 4c0:	c1 2c       	mov	r12, r1
 4c2:	d1 2c       	mov	r13, r1
 4c4:	24 c0       	rjmp	.+72     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
			if(leds[i] == 1) {
				PORTA = 0x40;
				//_delay_ms(t);
				break;
			}
			else PORTA = 0x00;
 4c6:	1b ba       	out	0x1b, r1	; 27
			PORTA = 0xFF; //A8
		} else{ //상태 led 끄기
			PORTA = 0xFF;
		}*/
		
		for(int i = 0; i < 8; i++){
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	88 30       	cpi	r24, 0x08	; 8
 4cc:	91 05       	cpc	r25, r1
 4ce:	34 f3       	brlt	.-52     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 4d0:	f5 cf       	rjmp	.-22     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
		}
		
		//lcd에 on/off 출력
		for(int l = 5; l >= 0; l--){
			
			MOVE(1,11-l);
 4d2:	6b e0       	ldi	r22, 0x0B	; 11
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	60 1b       	sub	r22, r16
 4d8:	71 0b       	sbc	r23, r17
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	23 de       	rcall	.-954    	; 0x126 <MOVE>
			if(leds[l] == 1){
 4e0:	f8 01       	movw	r30, r16
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	2c 0f       	add	r18, r28
 4ec:	3d 1f       	adc	r19, r29
 4ee:	e2 0f       	add	r30, r18
 4f0:	f3 1f       	adc	r31, r19
 4f2:	80 81       	ld	r24, Z
 4f4:	91 81       	ldd	r25, Z+1	; 0x01
 4f6:	01 97       	sbiw	r24, 0x01	; 1
				DATA('O');
 4f8:	31 f4       	brne	.+12     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4fa:	8f e4       	ldi	r24, 0x4F	; 79
 4fc:	35 de       	rcall	.-918    	; 0x168 <DATA>
				countL++;
 4fe:	3f ef       	ldi	r19, 0xFF	; 255
 500:	c3 1a       	sub	r12, r19
 502:	d3 0a       	sbc	r13, r19
			}
			else{
				DATA('X');
 504:	02 c0       	rjmp	.+4      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 506:	88 e5       	ldi	r24, 0x58	; 88
 508:	2f de       	rcall	.-930    	; 0x168 <DATA>
			}
			else PORTA = 0x00;
		}
		
		//lcd에 on/off 출력
		for(int l = 5; l >= 0; l--){
 50a:	01 50       	subi	r16, 0x01	; 1
 50c:	11 09       	sbc	r17, r1
 50e:	11 23       	and	r17, r17
			else{
				DATA('X');
			}
		}
		
		MOVE(2, 1);
 510:	04 f7       	brge	.-64     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	82 e0       	ldi	r24, 0x02	; 2
		DATA('U');
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	05 de       	rcall	.-1014   	; 0x126 <MOVE>
		DATA('s');
 51c:	85 e5       	ldi	r24, 0x55	; 85
 51e:	24 de       	rcall	.-952    	; 0x168 <DATA>
		DATA('i');
 520:	83 e7       	ldi	r24, 0x73	; 115
 522:	22 de       	rcall	.-956    	; 0x168 <DATA>
		DATA('n');
 524:	89 e6       	ldi	r24, 0x69	; 105
 526:	20 de       	rcall	.-960    	; 0x168 <DATA>
		DATA('g');
 528:	8e e6       	ldi	r24, 0x6E	; 110
 52a:	1e de       	rcall	.-964    	; 0x168 <DATA>
		DATA(' ');
 52c:	87 e6       	ldi	r24, 0x67	; 103
 52e:	1c de       	rcall	.-968    	; 0x168 <DATA>
		DATA('E');
 530:	80 e2       	ldi	r24, 0x20	; 32
 532:	1a de       	rcall	.-972    	; 0x168 <DATA>
		DATA('l');
 534:	85 e4       	ldi	r24, 0x45	; 69
 536:	18 de       	rcall	.-976    	; 0x168 <DATA>
		DATA('e');
 538:	8c e6       	ldi	r24, 0x6C	; 108
 53a:	16 de       	rcall	.-980    	; 0x168 <DATA>
		DATA('c');
 53c:	85 e6       	ldi	r24, 0x65	; 101
 53e:	14 de       	rcall	.-984    	; 0x168 <DATA>
		DATA(':');
 540:	83 e6       	ldi	r24, 0x63	; 99
 542:	12 de       	rcall	.-988    	; 0x168 <DATA>
 544:	8a e3       	ldi	r24, 0x3A	; 58
		MOVE(2, 13);
 546:	10 de       	rcall	.-992    	; 0x168 <DATA>
 548:	6d e0       	ldi	r22, 0x0D	; 13
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	ea dd       	rcall	.-1068   	; 0x126 <MOVE>
		DATA('0');
 552:	80 e3       	ldi	r24, 0x30	; 48
 554:	09 de       	rcall	.-1006   	; 0x168 <DATA>
		DATA('.');
 556:	8e e2       	ldi	r24, 0x2E	; 46
 558:	07 de       	rcall	.-1010   	; 0x168 <DATA>
 55a:	80 e3       	ldi	r24, 0x30	; 48
		DATA(countL+0x30);
 55c:	8c 0d       	add	r24, r12
 55e:	04 de       	rcall	.-1016   	; 0x168 <DATA>
 560:	87 e5       	ldi	r24, 0x57	; 87
 562:	02 de       	rcall	.-1020   	; 0x168 <DATA>
		DATA('W');
 564:	8f ef       	ldi	r24, 0xFF	; 255
 566:	9a e6       	ldi	r25, 0x6A	; 106
 568:	a3 e0       	ldi	r26, 0x03	; 3
 56a:	81 50       	subi	r24, 0x01	; 1
 56c:	90 40       	sbci	r25, 0x00	; 0
 56e:	a0 40       	sbci	r26, 0x00	; 0
 570:	e1 f7       	brne	.-8      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 572:	00 c0       	rjmp	.+0      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 574:	00 00       	nop
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	9f dd       	rcall	.-1218   	; 0xb8 <COMMAND>
 57a:	df ce       	rjmp	.-578    	; 0x33a <main+0x4c>

0000057c <__divmodhi4>:
		_delay_ms(70);
		COMMAND(0b00000001);		
 57c:	97 fb       	bst	r25, 7
 57e:	07 2e       	mov	r0, r23
 580:	16 f4       	brtc	.+4      	; 0x586 <__divmodhi4+0xa>
	}	
 582:	00 94       	com	r0
 584:	06 d0       	rcall	.+12     	; 0x592 <__divmodhi4_neg1>
 586:	77 fd       	sbrc	r23, 7
 588:	08 d0       	rcall	.+16     	; 0x59a <__divmodhi4_neg2>
 58a:	0b d0       	rcall	.+22     	; 0x5a2 <__udivmodhi4>
 58c:	07 fc       	sbrc	r0, 7
 58e:	05 d0       	rcall	.+10     	; 0x59a <__divmodhi4_neg2>
 590:	3e f4       	brtc	.+14     	; 0x5a0 <__divmodhi4_exit>

00000592 <__divmodhi4_neg1>:
 592:	90 95       	com	r25
 594:	81 95       	neg	r24
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	08 95       	ret

0000059a <__divmodhi4_neg2>:
 59a:	70 95       	com	r23
 59c:	61 95       	neg	r22
 59e:	7f 4f       	sbci	r23, 0xFF	; 255

000005a0 <__divmodhi4_exit>:
 5a0:	08 95       	ret

000005a2 <__udivmodhi4>:
 5a2:	aa 1b       	sub	r26, r26
 5a4:	bb 1b       	sub	r27, r27
 5a6:	51 e1       	ldi	r21, 0x11	; 17
 5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <__udivmodhi4_ep>

000005aa <__udivmodhi4_loop>:
 5aa:	aa 1f       	adc	r26, r26
 5ac:	bb 1f       	adc	r27, r27
 5ae:	a6 17       	cp	r26, r22
 5b0:	b7 07       	cpc	r27, r23
 5b2:	10 f0       	brcs	.+4      	; 0x5b8 <__udivmodhi4_ep>
 5b4:	a6 1b       	sub	r26, r22
 5b6:	b7 0b       	sbc	r27, r23

000005b8 <__udivmodhi4_ep>:
 5b8:	88 1f       	adc	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	5a 95       	dec	r21
 5be:	a9 f7       	brne	.-22     	; 0x5aa <__udivmodhi4_loop>
 5c0:	80 95       	com	r24
 5c2:	90 95       	com	r25
 5c4:	bc 01       	movw	r22, r24
 5c6:	cd 01       	movw	r24, r26
 5c8:	08 95       	ret

000005ca <_exit>:
 5ca:	f8 94       	cli

000005cc <__stop_program>:
 5cc:	ff cf       	rjmp	.-2      	; 0x5cc <__stop_program>
