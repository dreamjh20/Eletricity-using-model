
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000066c  000006e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000071c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013cb  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000949  00000000  00000000  00001b77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b7  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00002d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000457  00000000  00000000  00002e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cc4  00000000  00000000  000032a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00003f6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e6       	ldi	r30, 0x6C	; 108
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1d d1       	rcall	.+570    	; 0x2ee <main>
  b4:	d9 c2       	rjmp	.+1458   	; 0x668 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <COMMAND>:
	unsigned char i;
	for(i=0;i<n;i++)
	{
		DATA(font[i]);
	}
}
  b8:	ef e3       	ldi	r30, 0x3F	; 63
  ba:	ff e1       	ldi	r31, 0x1F	; 31
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <COMMAND+0x4>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <COMMAND+0xa>
  c2:	00 00       	nop
  c4:	98 2f       	mov	r25, r24
  c6:	90 7f       	andi	r25, 0xF0	; 240
  c8:	95 bb       	out	0x15, r25	; 21
  ca:	95 b3       	in	r25, 0x15	; 21
  cc:	9e 7f       	andi	r25, 0xFE	; 254
  ce:	95 bb       	out	0x15, r25	; 21
  d0:	95 b3       	in	r25, 0x15	; 21
  d2:	9d 7f       	andi	r25, 0xFD	; 253
  d4:	95 bb       	out	0x15, r25	; 21
  d6:	f5 e0       	ldi	r31, 0x05	; 5
  d8:	fa 95       	dec	r31
  da:	f1 f7       	brne	.-4      	; 0xd8 <COMMAND+0x20>
  dc:	00 00       	nop
  de:	95 b3       	in	r25, 0x15	; 21
  e0:	94 60       	ori	r25, 0x04	; 4
  e2:	95 bb       	out	0x15, r25	; 21
  e4:	25 e0       	ldi	r18, 0x05	; 5
  e6:	2a 95       	dec	r18
  e8:	f1 f7       	brne	.-4      	; 0xe6 <COMMAND+0x2e>
  ea:	00 00       	nop
  ec:	95 b3       	in	r25, 0x15	; 21
  ee:	9b 7f       	andi	r25, 0xFB	; 251
  f0:	95 bb       	out	0x15, r25	; 21
  f2:	e0 e1       	ldi	r30, 0x10	; 16
  f4:	8e 9f       	mul	r24, r30
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	85 bb       	out	0x15, r24	; 21
 102:	85 b3       	in	r24, 0x15	; 21
 104:	8d 7f       	andi	r24, 0xFD	; 253
 106:	85 bb       	out	0x15, r24	; 21
 108:	f5 e0       	ldi	r31, 0x05	; 5
 10a:	fa 95       	dec	r31
 10c:	f1 f7       	brne	.-4      	; 0x10a <COMMAND+0x52>
 10e:	00 00       	nop
 110:	85 b3       	in	r24, 0x15	; 21
 112:	84 60       	ori	r24, 0x04	; 4
 114:	85 bb       	out	0x15, r24	; 21
 116:	25 e0       	ldi	r18, 0x05	; 5
 118:	2a 95       	dec	r18
 11a:	f1 f7       	brne	.-4      	; 0x118 <COMMAND+0x60>
 11c:	00 00       	nop
 11e:	85 b3       	in	r24, 0x15	; 21
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	85 bb       	out	0x15, r24	; 21
 124:	08 95       	ret

00000126 <MOVE>:
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	19 f4       	brne	.+6      	; 0x130 <MOVE+0xa>
 12a:	8f e7       	ldi	r24, 0x7F	; 127
 12c:	86 0f       	add	r24, r22
 12e:	02 c0       	rjmp	.+4      	; 0x134 <MOVE+0xe>
 130:	8f eb       	ldi	r24, 0xBF	; 191
 132:	86 0f       	add	r24, r22
 134:	c1 cf       	rjmp	.-126    	; 0xb8 <COMMAND>
 136:	08 95       	ret

00000138 <LCD_INIT>:
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	86 e7       	ldi	r24, 0x76	; 118
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <LCD_INIT+0x6>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_INIT+0x10>
 148:	00 00       	nop
 14a:	88 e2       	ldi	r24, 0x28	; 40
 14c:	b5 df       	rcall	.-150    	; 0xb8 <COMMAND>
 14e:	8c e0       	ldi	r24, 0x0C	; 12
 150:	b3 df       	rcall	.-154    	; 0xb8 <COMMAND>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	b1 df       	rcall	.-158    	; 0xb8 <COMMAND>
 156:	87 ee       	ldi	r24, 0xE7	; 231
 158:	97 e1       	ldi	r25, 0x17	; 23
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_INIT+0x22>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_INIT+0x28>
 160:	00 00       	nop
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	a9 cf       	rjmp	.-174    	; 0xb8 <COMMAND>
 166:	08 95       	ret

00000168 <DATA>:
 168:	ef e3       	ldi	r30, 0x3F	; 63
 16a:	ff e1       	ldi	r31, 0x1F	; 31
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <DATA+0x4>
 170:	00 c0       	rjmp	.+0      	; 0x172 <DATA+0xa>
 172:	00 00       	nop
 174:	98 2f       	mov	r25, r24
 176:	90 7f       	andi	r25, 0xF0	; 240
 178:	95 bb       	out	0x15, r25	; 21
 17a:	95 b3       	in	r25, 0x15	; 21
 17c:	91 60       	ori	r25, 0x01	; 1
 17e:	95 bb       	out	0x15, r25	; 21
 180:	95 b3       	in	r25, 0x15	; 21
 182:	9d 7f       	andi	r25, 0xFD	; 253
 184:	95 bb       	out	0x15, r25	; 21
 186:	f5 e0       	ldi	r31, 0x05	; 5
 188:	fa 95       	dec	r31
 18a:	f1 f7       	brne	.-4      	; 0x188 <DATA+0x20>
 18c:	00 00       	nop
 18e:	95 b3       	in	r25, 0x15	; 21
 190:	94 60       	ori	r25, 0x04	; 4
 192:	95 bb       	out	0x15, r25	; 21
 194:	25 e0       	ldi	r18, 0x05	; 5
 196:	2a 95       	dec	r18
 198:	f1 f7       	brne	.-4      	; 0x196 <DATA+0x2e>
 19a:	00 00       	nop
 19c:	95 b3       	in	r25, 0x15	; 21
 19e:	9b 7f       	andi	r25, 0xFB	; 251
 1a0:	95 bb       	out	0x15, r25	; 21
 1a2:	e0 e1       	ldi	r30, 0x10	; 16
 1a4:	8e 9f       	mul	r24, r30
 1a6:	c0 01       	movw	r24, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	85 bb       	out	0x15, r24	; 21
 1ac:	85 b3       	in	r24, 0x15	; 21
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	85 bb       	out	0x15, r24	; 21
 1b2:	85 b3       	in	r24, 0x15	; 21
 1b4:	8d 7f       	andi	r24, 0xFD	; 253
 1b6:	85 bb       	out	0x15, r24	; 21
 1b8:	f5 e0       	ldi	r31, 0x05	; 5
 1ba:	fa 95       	dec	r31
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <DATA+0x52>
 1be:	00 00       	nop
 1c0:	85 b3       	in	r24, 0x15	; 21
 1c2:	84 60       	ori	r24, 0x04	; 4
 1c4:	85 bb       	out	0x15, r24	; 21
 1c6:	25 e0       	ldi	r18, 0x05	; 5
 1c8:	2a 95       	dec	r18
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <DATA+0x60>
 1cc:	00 00       	nop
 1ce:	85 b3       	in	r24, 0x15	; 21
 1d0:	8b 7f       	andi	r24, 0xFB	; 251
 1d2:	85 bb       	out	0x15, r24	; 21
 1d4:	08 95       	ret

000001d6 <fnds>:
	PORTC |= 0b00000100;		// E = 1, lcd 동작
	_delay_us(1);          		// E pulse width time 230ns 지연
	PORTC &= 0b11111011;		// E = 0
}

int fnds(int count){
 1d6:	cf 92       	push	r12
 1d8:	df 92       	push	r13
 1da:	ef 92       	push	r14
 1dc:	ff 92       	push	r15
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	2a 97       	sbiw	r28, 0x0a	; 10
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	de bf       	out	0x3e, r29	; 62
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	cd bf       	out	0x3d, r28	; 61
 1f6:	6c 01       	movw	r12, r24
	unsigned char fnd[10] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xd8, 0x80, 0x90};
 1f8:	8a e0       	ldi	r24, 0x0A	; 10
 1fa:	e0 e0       	ldi	r30, 0x00	; 0
 1fc:	f1 e0       	ldi	r31, 0x01	; 1
 1fe:	de 01       	movw	r26, r28
 200:	11 96       	adiw	r26, 0x01	; 1
 202:	01 90       	ld	r0, Z+
 204:	0d 92       	st	X+, r0
 206:	8a 95       	dec	r24
 208:	e1 f7       	brne	.-8      	; 0x202 <fnds+0x2c>

	int i = count / 1000;
 20a:	c6 01       	movw	r24, r12
 20c:	68 ee       	ldi	r22, 0xE8	; 232
 20e:	73 e0       	ldi	r23, 0x03	; 3
 210:	04 d2       	rcall	.+1032   	; 0x61a <__divmodhi4>
 212:	7b 01       	movw	r14, r22
	int j = count / 100 % 10;
 214:	c6 01       	movw	r24, r12
 216:	64 e6       	ldi	r22, 0x64	; 100
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	ff d1       	rcall	.+1022   	; 0x61a <__divmodhi4>
 21c:	cb 01       	movw	r24, r22
 21e:	2a e0       	ldi	r18, 0x0A	; 10
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	b9 01       	movw	r22, r18
 224:	fa d1       	rcall	.+1012   	; 0x61a <__divmodhi4>
 226:	8c 01       	movw	r16, r24
	int k = count / 10 % 10;
 228:	c6 01       	movw	r24, r12
 22a:	b9 01       	movw	r22, r18
 22c:	f6 d1       	rcall	.+1004   	; 0x61a <__divmodhi4>
 22e:	f8 2f       	mov	r31, r24
 230:	e9 2f       	mov	r30, r25
 232:	cb 01       	movw	r24, r22
 234:	b9 01       	movw	r22, r18
 236:	f1 d1       	rcall	.+994    	; 0x61a <__divmodhi4>
 238:	bc 01       	movw	r22, r24
 23a:	4f 2f       	mov	r20, r31
	int m = count % 10;
 23c:	5e 2f       	mov	r21, r30
 23e:	20 e0       	ldi	r18, 0x00	; 0

	for(int h = 0; h < 50; h++){
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	42 c0       	rjmp	.+132    	; 0x2c8 <fnds+0xf2>
 244:	e1 e0       	ldi	r30, 0x01	; 1
		PORTB=fnd[i];
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ec 0f       	add	r30, r28
 24a:	fd 1f       	adc	r31, r29
 24c:	ee 0d       	add	r30, r14
 24e:	ff 1d       	adc	r31, r15
 250:	80 81       	ld	r24, Z
 252:	88 bb       	out	0x18, r24	; 24
 254:	88 e0       	ldi	r24, 0x08	; 8
		PORTD=0x08; //왼쪽에서 첫번째 FND 지정
 256:	82 bb       	out	0x12, r24	; 18
 258:	8f e9       	ldi	r24, 0x9F	; 159
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	9f e0       	ldi	r25, 0x0F	; 15
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <fnds+0x86>
 260:	00 c0       	rjmp	.+0      	; 0x262 <fnds+0x8c>
 262:	00 00       	nop
 264:	e1 e0       	ldi	r30, 0x01	; 1
		_delay_ms(1);
		
		PORTB=fnd[j];
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ec 0f       	add	r30, r28
 26a:	fd 1f       	adc	r31, r29
 26c:	e0 0f       	add	r30, r16
 26e:	f1 1f       	adc	r31, r17
 270:	80 81       	ld	r24, Z
 272:	88 bb       	out	0x18, r24	; 24
 274:	84 e0       	ldi	r24, 0x04	; 4
		PORTD=0x04; //두번째 FND 지정
 276:	82 bb       	out	0x12, r24	; 18
 278:	8f e9       	ldi	r24, 0x9F	; 159
 27a:	9f e0       	ldi	r25, 0x0F	; 15
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <fnds+0xa6>
 280:	00 c0       	rjmp	.+0      	; 0x282 <fnds+0xac>
 282:	00 00       	nop
 284:	e1 e0       	ldi	r30, 0x01	; 1
		_delay_ms(1);
		
		PORTB=fnd[k];
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	ec 0f       	add	r30, r28
 28a:	fd 1f       	adc	r31, r29
 28c:	e6 0f       	add	r30, r22
 28e:	f7 1f       	adc	r31, r23
 290:	90 81       	ld	r25, Z
 292:	98 bb       	out	0x18, r25	; 24
 294:	92 e0       	ldi	r25, 0x02	; 2
		PORTD=0x02; //세번째 FND 지정
 296:	92 bb       	out	0x12, r25	; 18
 298:	8f e9       	ldi	r24, 0x9F	; 159
 29a:	9f e0       	ldi	r25, 0x0F	; 15
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <fnds+0xc6>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <fnds+0xcc>
 2a2:	00 00       	nop
 2a4:	e1 e0       	ldi	r30, 0x01	; 1
		_delay_ms(1);
		
		PORTB=fnd[m];
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	ec 0f       	add	r30, r28
 2aa:	fd 1f       	adc	r31, r29
 2ac:	e4 0f       	add	r30, r20
 2ae:	f5 1f       	adc	r31, r21
 2b0:	90 81       	ld	r25, Z
 2b2:	98 bb       	out	0x18, r25	; 24
 2b4:	91 e0       	ldi	r25, 0x01	; 1
		PORTD=0x01; //네번째 FND 지정
 2b6:	92 bb       	out	0x12, r25	; 18
 2b8:	8f e9       	ldi	r24, 0x9F	; 159
 2ba:	9f e0       	ldi	r25, 0x0F	; 15
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <fnds+0xe6>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <fnds+0xec>
 2c2:	00 00       	nop
 2c4:	2f 5f       	subi	r18, 0xFF	; 255
	int i = count / 1000;
	int j = count / 100 % 10;
	int k = count / 10 % 10;
	int m = count % 10;

	for(int h = 0; h < 50; h++){
 2c6:	3f 4f       	sbci	r19, 0xFF	; 255
 2c8:	22 33       	cpi	r18, 0x32	; 50
 2ca:	31 05       	cpc	r19, r1
 2cc:	0c f4       	brge	.+2      	; 0x2d0 <fnds+0xfa>
 2ce:	ba cf       	rjmp	.-140    	; 0x244 <fnds+0x6e>
 2d0:	2a 96       	adiw	r28, 0x0a	; 10
		
		PORTB=fnd[m];
		PORTD=0x01; //네번째 FND 지정
		_delay_ms(1);
	}
}
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
 2e8:	df 90       	pop	r13
 2ea:	cf 90       	pop	r12
 2ec:	08 95       	ret

000002ee <main>:
 2ee:	cf 93       	push	r28

int main(void)
{
 2f0:	df 93       	push	r29
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	2e 97       	sbiw	r28, 0x0e	; 14
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
	unsigned char sw3=0;
	unsigned char sw4=0;
	unsigned char sw5=0;
	unsigned char sw6=0;
	unsigned char sw7=0;
	int leds[7] = {0, 0, 0, 0, 0, 0, 0};
 302:	fe 01       	movw	r30, r28
 304:	31 96       	adiw	r30, 0x01	; 1
 306:	8e e0       	ldi	r24, 0x0E	; 14
 308:	df 01       	movw	r26, r30
 30a:	1d 92       	st	X+, r1
 30c:	8a 95       	dec	r24
 30e:	e9 f7       	brne	.-6      	; 0x30a <main+0x1c>
	unsigned int t = 2;
	int ch = 0;
	unsigned int count = 0;
	unsigned int countL = 0;
	DDRC = 0xff; //lcd
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	84 bb       	out	0x14, r24	; 20
	DDRE = 0xFF; //led
 314:	82 b9       	out	0x02, r24	; 2
	DDRA = 0xFF;
 316:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
 318:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00; //lcd
 31a:	15 ba       	out	0x15, r1	; 21
	DDRE = 0x00; //스위치
 31c:	12 b8       	out	0x02, r1	; 2
	
	DDRB=0xFF;
 31e:	87 bb       	out	0x17, r24	; 23
	DDRD=0xFF;
 320:	81 bb       	out	0x11, r24	; 17
	PORTB=0xFF;
 322:	88 bb       	out	0x18, r24	; 24
	PORTD=0xFF;
 324:	82 bb       	out	0x12, r24	; 18
	
	LCD_INIT(); //lcd초기
 326:	08 df       	rcall	.-496    	; 0x138 <LCD_INIT>
	unsigned char sw6=0;
	unsigned char sw7=0;
	int leds[7] = {0, 0, 0, 0, 0, 0, 0};
	unsigned int t = 2;
	int ch = 0;
	unsigned int count = 0;
 328:	c1 2c       	mov	r12, r1
 32a:	d1 2c       	mov	r13, r1
	unsigned char sw1=0;
	unsigned char sw2=0;
	unsigned char sw3=0;
	unsigned char sw4=0;
	unsigned char sw5=0;
	unsigned char sw6=0;
 32c:	71 2c       	mov	r7, r1
{
	unsigned char sw1=0;
	unsigned char sw2=0;
	unsigned char sw3=0;
	unsigned char sw4=0;
	unsigned char sw5=0;
 32e:	81 2c       	mov	r8, r1
int main(void)
{
	unsigned char sw1=0;
	unsigned char sw2=0;
	unsigned char sw3=0;
	unsigned char sw4=0;
 330:	91 2c       	mov	r9, r1

int main(void)
{
	unsigned char sw1=0;
	unsigned char sw2=0;
	unsigned char sw3=0;
 332:	a1 2c       	mov	r10, r1
}

int main(void)
{
	unsigned char sw1=0;
	unsigned char sw2=0;
 334:	b1 2c       	mov	r11, r1
	}
}

int main(void)
{
	unsigned char sw1=0;
 336:	61 2c       	mov	r6, r1
		}*/

		sw7=0;
		countL = 0;
		//스위치
		if((PINE&0x01) == 0x00) {
 338:	08 99       	sbic	0x01, 0	; 1
 33a:	06 c0       	rjmp	.+12     	; 0x348 <main+0x5a>
			sw1 = 1 - sw1;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	86 19       	sub	r24, r6
 340:	68 2e       	mov	r6, r24
			count++;
 342:	bf ef       	ldi	r27, 0xFF	; 255
 344:	cb 1a       	sub	r12, r27
 346:	db 0a       	sbc	r13, r27
		}
		if((PINE&0x02) == 0x00) {
 348:	09 99       	sbic	0x01, 1	; 1
 34a:	06 c0       	rjmp	.+12     	; 0x358 <main+0x6a>
			sw2 = 1 - sw2;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	8b 19       	sub	r24, r11
 350:	b8 2e       	mov	r11, r24
			count++;
 352:	ef ef       	ldi	r30, 0xFF	; 255
 354:	ce 1a       	sub	r12, r30
 356:	de 0a       	sbc	r13, r30
		}
		if((PINE&0x04) == 0x00) {
 358:	0a 99       	sbic	0x01, 2	; 1
 35a:	06 c0       	rjmp	.+12     	; 0x368 <main+0x7a>
			sw3 = 1 - sw3;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	8a 19       	sub	r24, r10
 360:	a8 2e       	mov	r10, r24
			count++;
 362:	ff ef       	ldi	r31, 0xFF	; 255
 364:	cf 1a       	sub	r12, r31
 366:	df 0a       	sbc	r13, r31
		}
		if((PINE&0x08) == 0x00) {
 368:	0b 99       	sbic	0x01, 3	; 1
 36a:	06 c0       	rjmp	.+12     	; 0x378 <main+0x8a>
			sw4 = 1 - sw4;
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	89 19       	sub	r24, r9
 370:	98 2e       	mov	r9, r24
			count++;
 372:	2f ef       	ldi	r18, 0xFF	; 255
 374:	c2 1a       	sub	r12, r18
 376:	d2 0a       	sbc	r13, r18
		}
		if((PINE&0x10) == 0x00) {
 378:	0c 99       	sbic	0x01, 4	; 1
 37a:	06 c0       	rjmp	.+12     	; 0x388 <main+0x9a>
			sw5 = 1 - sw5;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	88 19       	sub	r24, r8
 380:	88 2e       	mov	r8, r24
			count++;
 382:	3f ef       	ldi	r19, 0xFF	; 255
 384:	c3 1a       	sub	r12, r19
 386:	d3 0a       	sbc	r13, r19
		}
		if((PINE&0x20) == 0x00) {
 388:	0d 99       	sbic	0x01, 5	; 1
 38a:	06 c0       	rjmp	.+12     	; 0x398 <main+0xaa>
			sw6 = 1 - sw6;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	87 19       	sub	r24, r7
 390:	78 2e       	mov	r7, r24
			count++;
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	c8 1a       	sub	r12, r24
 396:	d8 0a       	sbc	r13, r24
		}
		if((PINE&0x40) == 0x00) {
 398:	0e 99       	sbic	0x01, 6	; 1
 39a:	05 c0       	rjmp	.+10     	; 0x3a6 <main+0xb8>
			sw7 = 1;
			count++;
 39c:	9f ef       	ldi	r25, 0xFF	; 255
 39e:	c9 1a       	sub	r12, r25
 3a0:	d9 0a       	sbc	r13, r25
		if((PINE&0x20) == 0x00) {
			sw6 = 1 - sw6;
			count++;
		}
		if((PINE&0x40) == 0x00) {
			sw7 = 1;
 3a2:	31 e0       	ldi	r19, 0x01	; 1
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <main+0xba>
			
			PORTB=fnd[digit];
			_delay_ms(1000);
		}*/

		sw7=0;
 3a6:	30 e0       	ldi	r19, 0x00	; 0
		if((PINE&0x40) == 0x00) {
			sw7 = 1;
			count++;
		}
		
		for(int m=0; m < 2; m++){
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	af c0       	rjmp	.+350    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
			if(sw1 == 1){
 3ae:	a1 e0       	ldi	r26, 0x01	; 1
 3b0:	6a 12       	cpse	r6, r26
 3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <main+0xd6>
				leds[0] = 1;
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	5a 83       	std	Y+2, r21	; 0x02
 3ba:	49 83       	std	Y+1, r20	; 0x01
				PORTA|=0x01;
 3bc:	2b b3       	in	r18, 0x1b	; 27
 3be:	21 60       	ori	r18, 0x01	; 1
 3c0:	2b bb       	out	0x1b, r18	; 27
 3c2:	0d c0       	rjmp	.+26     	; 0x3de <main+0xf0>
				//_delay_ms(t);
			}

			else if(sw1 == 0) {
 3c4:	61 10       	cpse	r6, r1
 3c6:	0b c0       	rjmp	.+22     	; 0x3de <main+0xf0>
				leds[0] = 0;
 3c8:	1a 82       	std	Y+2, r1	; 0x02
 3ca:	19 82       	std	Y+1, r1	; 0x01
				PORTA &= 0xFE;
 3cc:	2b b3       	in	r18, 0x1b	; 27
 3ce:	2e 7f       	andi	r18, 0xFE	; 254
 3d0:	2b bb       	out	0x1b, r18	; 27
 3d2:	ef e3       	ldi	r30, 0x3F	; 63
 3d4:	ff e1       	ldi	r31, 0x1F	; 31
 3d6:	31 97       	sbiw	r30, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <main+0xe8>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <main+0xee>
 3dc:	00 00       	nop
				_delay_ms(t);
			}
			if(sw2 == 1){
 3de:	f1 e0       	ldi	r31, 0x01	; 1
 3e0:	bf 12       	cpse	r11, r31
 3e2:	0e c0       	rjmp	.+28     	; 0x400 <__LOCK_REGION_LENGTH__>
				leds[1] = 1;
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	5c 83       	std	Y+4, r21	; 0x04
 3ea:	4b 83       	std	Y+3, r20	; 0x03
				PORTA|=0x02;
 3ec:	2b b3       	in	r18, 0x1b	; 27
 3ee:	22 60       	ori	r18, 0x02	; 2
 3f0:	2b bb       	out	0x1b, r18	; 27
 3f2:	af e3       	ldi	r26, 0x3F	; 63
 3f4:	bf e1       	ldi	r27, 0x1F	; 31
 3f6:	11 97       	sbiw	r26, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <main+0x108>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <main+0x10e>
 3fc:	00 00       	nop
 3fe:	0d c0       	rjmp	.+26     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				_delay_ms(t);
			}
			else if(sw2 == 0) {
 400:	b1 10       	cpse	r11, r1
 402:	0b c0       	rjmp	.+22     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				leds[1] = 0;
 404:	1c 82       	std	Y+4, r1	; 0x04
 406:	1b 82       	std	Y+3, r1	; 0x03
				PORTA &= 0xfd;
 408:	2b b3       	in	r18, 0x1b	; 27
 40a:	2d 7f       	andi	r18, 0xFD	; 253
 40c:	2b bb       	out	0x1b, r18	; 27
 40e:	ef e3       	ldi	r30, 0x3F	; 63
 410:	ff e1       	ldi	r31, 0x1F	; 31
 412:	31 97       	sbiw	r30, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 418:	00 00       	nop
				_delay_ms(t);
			}
			if(sw3 == 1){
 41a:	f1 e0       	ldi	r31, 0x01	; 1
 41c:	af 12       	cpse	r10, r31
 41e:	0e c0       	rjmp	.+28     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
				leds[2] = 1;
 420:	41 e0       	ldi	r20, 0x01	; 1
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	5e 83       	std	Y+6, r21	; 0x06
 426:	4d 83       	std	Y+5, r20	; 0x05
				PORTA |= 0x04;
 428:	2b b3       	in	r18, 0x1b	; 27
 42a:	24 60       	ori	r18, 0x04	; 4
 42c:	2b bb       	out	0x1b, r18	; 27
 42e:	af e3       	ldi	r26, 0x3F	; 63
 430:	bf e1       	ldi	r27, 0x1F	; 31
 432:	11 97       	sbiw	r26, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 438:	00 00       	nop
 43a:	0d c0       	rjmp	.+26     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
				_delay_ms(t);
			}
			else if(sw3 == 0) {
 43c:	a1 10       	cpse	r10, r1
 43e:	0b c0       	rjmp	.+22     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
				leds[2] = 0;
 440:	1e 82       	std	Y+6, r1	; 0x06
 442:	1d 82       	std	Y+5, r1	; 0x05
				PORTA &= 0xFB;
 444:	2b b3       	in	r18, 0x1b	; 27
 446:	2b 7f       	andi	r18, 0xFB	; 251
 448:	2b bb       	out	0x1b, r18	; 27
 44a:	ef e3       	ldi	r30, 0x3F	; 63
 44c:	ff e1       	ldi	r31, 0x1F	; 31
 44e:	31 97       	sbiw	r30, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 454:	00 00       	nop
				_delay_ms(t);
			}
			if(sw4 == 1){
 456:	f1 e0       	ldi	r31, 0x01	; 1
 458:	9f 12       	cpse	r9, r31
 45a:	0e c0       	rjmp	.+28     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
				leds[3] = 1;
 45c:	41 e0       	ldi	r20, 0x01	; 1
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	58 87       	std	Y+8, r21	; 0x08
 462:	4f 83       	std	Y+7, r20	; 0x07
				PORTA |= 0x08;
 464:	2b b3       	in	r18, 0x1b	; 27
 466:	28 60       	ori	r18, 0x08	; 8
 468:	2b bb       	out	0x1b, r18	; 27
 46a:	af e3       	ldi	r26, 0x3F	; 63
 46c:	bf e1       	ldi	r27, 0x1F	; 31
 46e:	11 97       	sbiw	r26, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 472:	00 c0       	rjmp	.+0      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 474:	00 00       	nop
 476:	0d c0       	rjmp	.+26     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
				_delay_ms(t);
			}
			else if(sw4 == 0) {
 478:	91 10       	cpse	r9, r1
 47a:	0b c0       	rjmp	.+22     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
				leds[3] = 0;
 47c:	18 86       	std	Y+8, r1	; 0x08
 47e:	1f 82       	std	Y+7, r1	; 0x07
				PORTA &= 0xF7;
 480:	2b b3       	in	r18, 0x1b	; 27
 482:	27 7f       	andi	r18, 0xF7	; 247
 484:	2b bb       	out	0x1b, r18	; 27
 486:	ef e3       	ldi	r30, 0x3F	; 63
 488:	ff e1       	ldi	r31, 0x1F	; 31
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 490:	00 00       	nop
				_delay_ms(t);
			}
			if(sw5 == 1){
 492:	f1 e0       	ldi	r31, 0x01	; 1
 494:	8f 12       	cpse	r8, r31
 496:	0e c0       	rjmp	.+28     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
				leds[4] = 1;
 498:	41 e0       	ldi	r20, 0x01	; 1
 49a:	50 e0       	ldi	r21, 0x00	; 0
 49c:	5a 87       	std	Y+10, r21	; 0x0a
 49e:	49 87       	std	Y+9, r20	; 0x09
				PORTA |= 0x10;
 4a0:	2b b3       	in	r18, 0x1b	; 27
 4a2:	20 61       	ori	r18, 0x10	; 16
 4a4:	2b bb       	out	0x1b, r18	; 27
 4a6:	af e3       	ldi	r26, 0x3F	; 63
 4a8:	bf e1       	ldi	r27, 0x1F	; 31
 4aa:	11 97       	sbiw	r26, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4b0:	00 00       	nop
 4b2:	0d c0       	rjmp	.+26     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
				_delay_ms(t);
			}
			else if(sw5 == 0) {
 4b4:	81 10       	cpse	r8, r1
 4b6:	0b c0       	rjmp	.+22     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
				leds[4] = 0;
 4b8:	1a 86       	std	Y+10, r1	; 0x0a
 4ba:	19 86       	std	Y+9, r1	; 0x09
				PORTA &= 0xEF;
 4bc:	2b b3       	in	r18, 0x1b	; 27
 4be:	2f 7e       	andi	r18, 0xEF	; 239
 4c0:	2b bb       	out	0x1b, r18	; 27
 4c2:	ef e3       	ldi	r30, 0x3F	; 63
 4c4:	ff e1       	ldi	r31, 0x1F	; 31
 4c6:	31 97       	sbiw	r30, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4cc:	00 00       	nop
				_delay_ms(t);
			}
			if(sw6 == 1){
 4ce:	f1 e0       	ldi	r31, 0x01	; 1
 4d0:	7f 12       	cpse	r7, r31
 4d2:	0e c0       	rjmp	.+28     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
				leds[5] = 1;
 4d4:	41 e0       	ldi	r20, 0x01	; 1
 4d6:	50 e0       	ldi	r21, 0x00	; 0
 4d8:	5c 87       	std	Y+12, r21	; 0x0c
 4da:	4b 87       	std	Y+11, r20	; 0x0b
				PORTA |= 0x20;
 4dc:	2b b3       	in	r18, 0x1b	; 27
 4de:	20 62       	ori	r18, 0x20	; 32
 4e0:	2b bb       	out	0x1b, r18	; 27
 4e2:	af e3       	ldi	r26, 0x3F	; 63
 4e4:	bf e1       	ldi	r27, 0x1F	; 31
 4e6:	11 97       	sbiw	r26, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4ec:	00 00       	nop
 4ee:	0d c0       	rjmp	.+26     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
				_delay_ms(t);
			}
			else if(sw6 == 0) {
 4f0:	71 10       	cpse	r7, r1
 4f2:	0b c0       	rjmp	.+22     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
				leds[5] = 0;
 4f4:	1c 86       	std	Y+12, r1	; 0x0c
 4f6:	1b 86       	std	Y+11, r1	; 0x0b
				PORTA &= 0xDF;
 4f8:	2b b3       	in	r18, 0x1b	; 27
 4fa:	2f 7d       	andi	r18, 0xDF	; 223
 4fc:	2b bb       	out	0x1b, r18	; 27
 4fe:	ef e3       	ldi	r30, 0x3F	; 63
 500:	ff e1       	ldi	r31, 0x1F	; 31
 502:	31 97       	sbiw	r30, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 506:	00 c0       	rjmp	.+0      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 508:	00 00       	nop
		if((PINE&0x40) == 0x00) {
			sw7 = 1;
			count++;
		}
		
		for(int m=0; m < 2; m++){
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	82 30       	cpi	r24, 0x02	; 2
 50e:	91 05       	cpc	r25, r1
 510:	0c f4       	brge	.+2      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 512:	4d cf       	rjmp	.-358    	; 0x3ae <main+0xc0>
				PORTA &= 0xDF;
				_delay_ms(t);
			}
		}
		//led off switch
		if(sw7 == 1){
 514:	31 30       	cpi	r19, 0x01	; 1
 516:	31 f4       	brne	.+12     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
			sw1 = 0;
			sw2 = 0;
			sw3 = 0;
			sw4 = 0;
			sw5 = 0;
			sw6 = 0;
 518:	71 2c       	mov	r7, r1
		if(sw7 == 1){
			sw1 = 0;
			sw2 = 0;
			sw3 = 0;
			sw4 = 0;
			sw5 = 0;
 51a:	81 2c       	mov	r8, r1
		//led off switch
		if(sw7 == 1){
			sw1 = 0;
			sw2 = 0;
			sw3 = 0;
			sw4 = 0;
 51c:	91 2c       	mov	r9, r1
		}
		//led off switch
		if(sw7 == 1){
			sw1 = 0;
			sw2 = 0;
			sw3 = 0;
 51e:	a1 2c       	mov	r10, r1
			}
		}
		//led off switch
		if(sw7 == 1){
			sw1 = 0;
			sw2 = 0;
 520:	b1 2c       	mov	r11, r1
				_delay_ms(t);
			}
		}
		//led off switch
		if(sw7 == 1){
			sw1 = 0;
 522:	61 2c       	mov	r6, r1
			sw3 = 0;
			sw4 = 0;
			sw5 = 0;
			sw6 = 0;
		}
		fnds(count);
 524:	c6 01       	movw	r24, r12
 526:	57 de       	rcall	.-850    	; 0x1d6 <fnds>
			PORTA = 0xFF; //A8
		} else{ //상태 led 끄기
			PORTA = 0xFF;
		}*/
		
		for(int i = 0; i < 8; i++){
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	17 c0       	rjmp	.+46     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
			if(leds[i] == 1) {
 52e:	fc 01       	movw	r30, r24
 530:	ee 0f       	add	r30, r30
 532:	ff 1f       	adc	r31, r31
 534:	21 e0       	ldi	r18, 0x01	; 1
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	2c 0f       	add	r18, r28
 53a:	3d 1f       	adc	r19, r29
 53c:	e2 0f       	add	r30, r18
 53e:	f3 1f       	adc	r31, r19
 540:	20 81       	ld	r18, Z
 542:	31 81       	ldd	r19, Z+1	; 0x01
 544:	21 30       	cpi	r18, 0x01	; 1
 546:	31 05       	cpc	r19, r1
 548:	39 f4       	brne	.+14     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
				PORTA = 0x40;
 54a:	80 e4       	ldi	r24, 0x40	; 64
 54c:	8b bb       	out	0x1b, r24	; 27
			PORTA = 0xFF; //A8
		} else{ //상태 led 끄기
			PORTA = 0xFF;
		}*/
		
		for(int i = 0; i < 8; i++){
 54e:	05 e0       	ldi	r16, 0x05	; 5
 550:	10 e0       	ldi	r17, 0x00	; 0
 552:	e1 2c       	mov	r14, r1
 554:	f1 2c       	mov	r15, r1
 556:	24 c0       	rjmp	.+72     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
			if(leds[i] == 1) {
				PORTA = 0x40;
				//_delay_ms(t);
				break;
			}
			else PORTA = 0x00;
 558:	1b ba       	out	0x1b, r1	; 27
			PORTA = 0xFF; //A8
		} else{ //상태 led 끄기
			PORTA = 0xFF;
		}*/
		
		for(int i = 0; i < 8; i++){
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	88 30       	cpi	r24, 0x08	; 8
 55e:	91 05       	cpc	r25, r1
 560:	34 f3       	brlt	.-52     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 562:	f5 cf       	rjmp	.-22     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
		}
		
		//lcd에 on/off 출력
		for(int l = 5; l >= 0; l--){
			
			MOVE(1,11-l);
 564:	6b e0       	ldi	r22, 0x0B	; 11
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	60 1b       	sub	r22, r16
 56a:	71 0b       	sbc	r23, r17
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	da dd       	rcall	.-1100   	; 0x126 <MOVE>
			if(leds[l] == 1){
 572:	f8 01       	movw	r30, r16
 574:	ee 0f       	add	r30, r30
 576:	ff 1f       	adc	r31, r31
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	8c 0f       	add	r24, r28
 57e:	9d 1f       	adc	r25, r29
 580:	e8 0f       	add	r30, r24
 582:	f9 1f       	adc	r31, r25
 584:	80 81       	ld	r24, Z
 586:	91 81       	ldd	r25, Z+1	; 0x01
 588:	01 97       	sbiw	r24, 0x01	; 1
				DATA('O');
 58a:	31 f4       	brne	.+12     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 58c:	8f e4       	ldi	r24, 0x4F	; 79
 58e:	ec dd       	rcall	.-1064   	; 0x168 <DATA>
				countL++;
 590:	9f ef       	ldi	r25, 0xFF	; 255
 592:	e9 1a       	sub	r14, r25
 594:	f9 0a       	sbc	r15, r25
			}
			else{
				DATA('X');
 596:	02 c0       	rjmp	.+4      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 598:	88 e5       	ldi	r24, 0x58	; 88
 59a:	e6 dd       	rcall	.-1076   	; 0x168 <DATA>
			}
			else PORTA = 0x00;
		}
		
		//lcd에 on/off 출력
		for(int l = 5; l >= 0; l--){
 59c:	01 50       	subi	r16, 0x01	; 1
 59e:	11 09       	sbc	r17, r1
 5a0:	11 23       	and	r17, r17
 5a2:	04 f7       	brge	.-64     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 5a4:	00 e0       	ldi	r16, 0x00	; 0
 5a6:	10 e0       	ldi	r17, 0x00	; 0
				DATA('X');
			}
		}
		
		for(int i = 0; i < 10; i++){
			MOVE(2, 1);
 5a8:	31 c0       	rjmp	.+98     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 5aa:	61 e0       	ldi	r22, 0x01	; 1
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	82 e0       	ldi	r24, 0x02	; 2
			DATA('U');
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	b9 dd       	rcall	.-1166   	; 0x126 <MOVE>
			DATA('s');
 5b4:	85 e5       	ldi	r24, 0x55	; 85
 5b6:	d8 dd       	rcall	.-1104   	; 0x168 <DATA>
			DATA('i');
 5b8:	83 e7       	ldi	r24, 0x73	; 115
 5ba:	d6 dd       	rcall	.-1108   	; 0x168 <DATA>
			DATA('n');
 5bc:	89 e6       	ldi	r24, 0x69	; 105
 5be:	d4 dd       	rcall	.-1112   	; 0x168 <DATA>
			DATA('g');
 5c0:	8e e6       	ldi	r24, 0x6E	; 110
 5c2:	d2 dd       	rcall	.-1116   	; 0x168 <DATA>
			DATA(' ');
 5c4:	87 e6       	ldi	r24, 0x67	; 103
 5c6:	d0 dd       	rcall	.-1120   	; 0x168 <DATA>
			DATA('E');
 5c8:	80 e2       	ldi	r24, 0x20	; 32
 5ca:	ce dd       	rcall	.-1124   	; 0x168 <DATA>
			DATA('l');
 5cc:	85 e4       	ldi	r24, 0x45	; 69
 5ce:	cc dd       	rcall	.-1128   	; 0x168 <DATA>
			DATA('e');
 5d0:	8c e6       	ldi	r24, 0x6C	; 108
 5d2:	ca dd       	rcall	.-1132   	; 0x168 <DATA>
			DATA('c');
 5d4:	85 e6       	ldi	r24, 0x65	; 101
 5d6:	c8 dd       	rcall	.-1136   	; 0x168 <DATA>
			DATA(':');
 5d8:	83 e6       	ldi	r24, 0x63	; 99
 5da:	c6 dd       	rcall	.-1140   	; 0x168 <DATA>
 5dc:	8a e3       	ldi	r24, 0x3A	; 58
			MOVE(2, 13);
 5de:	c4 dd       	rcall	.-1144   	; 0x168 <DATA>
 5e0:	6d e0       	ldi	r22, 0x0D	; 13
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	82 e0       	ldi	r24, 0x02	; 2
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	9e dd       	rcall	.-1220   	; 0x126 <MOVE>
			DATA('0');
 5ea:	80 e3       	ldi	r24, 0x30	; 48
 5ec:	bd dd       	rcall	.-1158   	; 0x168 <DATA>
 5ee:	8e e2       	ldi	r24, 0x2E	; 46
			DATA('.');
 5f0:	bb dd       	rcall	.-1162   	; 0x168 <DATA>
 5f2:	80 e3       	ldi	r24, 0x30	; 48
			DATA(countL+0x30);
 5f4:	8e 0d       	add	r24, r14
 5f6:	b8 dd       	rcall	.-1168   	; 0x168 <DATA>
 5f8:	87 e5       	ldi	r24, 0x57	; 87
 5fa:	b6 dd       	rcall	.-1172   	; 0x168 <DATA>
			DATA('W');
 5fc:	af e9       	ldi	r26, 0x9F	; 159
 5fe:	bf e0       	ldi	r27, 0x0F	; 15
 600:	11 97       	sbiw	r26, 0x01	; 1
 602:	f1 f7       	brne	.-4      	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 604:	00 c0       	rjmp	.+0      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 606:	00 00       	nop
 608:	0f 5f       	subi	r16, 0xFF	; 255
 60a:	1f 4f       	sbci	r17, 0xFF	; 255
 60c:	0a 30       	cpi	r16, 0x0A	; 10
			else{
				DATA('X');
			}
		}
		
		for(int i = 0; i < 10; i++){
 60e:	11 05       	cpc	r17, r1
 610:	0c f4       	brge	.+2      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 612:	cb cf       	rjmp	.-106    	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	50 dd       	rcall	.-1376   	; 0xb8 <COMMAND>
 618:	8f ce       	rjmp	.-738    	; 0x338 <main+0x4a>

0000061a <__divmodhi4>:
			DATA('.');
			DATA(countL+0x30);
			DATA('W');
			_delay_ms(1);
		}
		COMMAND(0b00000001);
 61a:	97 fb       	bst	r25, 7
 61c:	07 2e       	mov	r0, r23
 61e:	16 f4       	brtc	.+4      	; 0x624 <__divmodhi4+0xa>
	}	
 620:	00 94       	com	r0
 622:	06 d0       	rcall	.+12     	; 0x630 <__divmodhi4_neg1>
 624:	77 fd       	sbrc	r23, 7
 626:	08 d0       	rcall	.+16     	; 0x638 <__divmodhi4_neg2>
 628:	0b d0       	rcall	.+22     	; 0x640 <__udivmodhi4>
 62a:	07 fc       	sbrc	r0, 7
 62c:	05 d0       	rcall	.+10     	; 0x638 <__divmodhi4_neg2>
 62e:	3e f4       	brtc	.+14     	; 0x63e <__divmodhi4_exit>

00000630 <__divmodhi4_neg1>:
 630:	90 95       	com	r25
 632:	81 95       	neg	r24
 634:	9f 4f       	sbci	r25, 0xFF	; 255
 636:	08 95       	ret

00000638 <__divmodhi4_neg2>:
 638:	70 95       	com	r23
 63a:	61 95       	neg	r22
 63c:	7f 4f       	sbci	r23, 0xFF	; 255

0000063e <__divmodhi4_exit>:
 63e:	08 95       	ret

00000640 <__udivmodhi4>:
 640:	aa 1b       	sub	r26, r26
 642:	bb 1b       	sub	r27, r27
 644:	51 e1       	ldi	r21, 0x11	; 17
 646:	07 c0       	rjmp	.+14     	; 0x656 <__udivmodhi4_ep>

00000648 <__udivmodhi4_loop>:
 648:	aa 1f       	adc	r26, r26
 64a:	bb 1f       	adc	r27, r27
 64c:	a6 17       	cp	r26, r22
 64e:	b7 07       	cpc	r27, r23
 650:	10 f0       	brcs	.+4      	; 0x656 <__udivmodhi4_ep>
 652:	a6 1b       	sub	r26, r22
 654:	b7 0b       	sbc	r27, r23

00000656 <__udivmodhi4_ep>:
 656:	88 1f       	adc	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	5a 95       	dec	r21
 65c:	a9 f7       	brne	.-22     	; 0x648 <__udivmodhi4_loop>
 65e:	80 95       	com	r24
 660:	90 95       	com	r25
 662:	bc 01       	movw	r22, r24
 664:	cd 01       	movw	r24, r26
 666:	08 95       	ret

00000668 <_exit>:
 668:	f8 94       	cli

0000066a <__stop_program>:
 66a:	ff cf       	rjmp	.-2      	; 0x66a <__stop_program>
